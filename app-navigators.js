// Generated by CoffeeScript 1.3.3
(function() {
  var CYCLE_COUNT, CYCLE_INTERVAL, STATS_UPDATE_INTERVAL,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone.Store.prototype.clear = function() {
    var collection, model, relation, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    _ref = this._collections;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      collection = _ref[_i];
      collection.unbind('relational:remove', collection._modelRemovedFromCollection);
      collection.unbind('relational:add', collection._relatedModelAdded);
      collection.unbind('relational:remove', collection._relatedModelRemoved);
      _ref1 = _.clone(collection.models);
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        model = _ref1[_j];
        if (!(model instanceof Backbone.RelationalModel)) {
          continue;
        }
        this.unregister(model);
        model._queue = null;
        _ref2 = model._relations;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          relation = _ref2[_k];
          if (relation.related) {
            relation.related.unbind('relational:add', relation.handleAddition);
            relation.related.unbind('relational:remove', relation.handleRemoval);
            relation.related.unbind('relational:reset', relation.handleReset);
            model.unbind('relational:change:' + relation.key, relation.onChange);
          }
          relation.destroy();
        }
        model._relations = [];
        model._previousAttributes = {};
      }
      collection.models = [];
    }
    this._collections = [];
    return this._reverseRelations = [];
  };

  window.RouterBackboneJSExtendedNoCache = Backbone.Router.extend({
    constructor: function(page_navigator) {
      Backbone.Router.prototype.constructor.apply(this, arguments);
      this.route('', null, page_navigator.dispatcher(function() {
        return page_navigator.loadPage({
          create: function() {
            return kb.renderTemplate('home', {});
          },
          transition: {
            name: 'FadeIn',
            duration: 1000
          }
        });
      }));
      this.route('things', null, page_navigator.dispatcher(function() {
        return page_navigator.loadPage({
          create: function() {
            return kb.renderTemplate('things_page', new ThingsPageViewModel());
          },
          transition: 'NavigationSlide'
        });
      }));
      return this.route('things/:id', null, page_navigator.dispatcher(function(id) {
        var model;
        model = app.collections.things.get(id) || new Backbone.ModelRef(app.collections.things, id);
        return page_navigator.loadPage({
          create: function() {
            return kb.renderTemplate('thing_page', new ThingCellViewModel(model));
          },
          transition: 'CoverVertical'
        });
      }));
    }
  });

  window.ApplicationViewModelExtended = (function(_super) {

    __extends(ApplicationViewModelExtended, _super);

    function ApplicationViewModelExtended(options) {
      this.options = options;
      this.afterRender = __bind(this.afterRender, this);

      if (!this.options.has_panes) {
        this.mode = 'P';
      } else if (this.options.no_history) {
        this.mode = 'A';
      } else if (!this.options.no_cache) {
        this.mode = 'A+H';
      } else {
        this.mode = 'A+H+NC';
      }
      ApplicationViewModelExtended.__super__.constructor.apply(this, arguments);
    }

    ApplicationViewModelExtended.prototype.afterRender = function(nodes) {
      var page_navigator_el;
      page_navigator_el = $(nodes[0].parentNode).find('.pane-navigator.page')[0];
      if (!this.options.has_panes) {
        this.page_navigator = new kb.PageNavigatorSimple(page_navigator_el, this.options);
      } else {
        this.page_navigator = new kb.PageNavigatorPanes(page_navigator_el, this.options);
      }
      if (!this.options.no_cache) {
        this.router = new RouterBackboneJSExtended(this.page_navigator);
      } else {
        this.router = new RouterBackboneJSExtendedNoCache(this.page_navigator);
      }
      return ApplicationViewModelExtended.__super__.afterRender.apply(this, arguments);
    };

    return ApplicationViewModelExtended;

  })(ApplicationViewModel);

  STATS_UPDATE_INTERVAL = 1000;

  CYCLE_COUNT = 20;

  CYCLE_INTERVAL = 10;

  window.toFixed = function(value, precision) {
    var power;
    power = Math.pow(10, precision || 0);
    return String(Math.round(value * power) / power);
  };

  window.StatisticsViewModel = (function() {

    function StatisticsViewModel() {
      _.bindAll(this, 'open', 'close', 'clear', 'resetBaselineMemory', 'updateIfOpened');
      kb.statistics = new kb.Statistics();
      this.is_opened = ko.observable(false);
      this.observable_stats = ko.observable('none');
      this.model_events_stats = ko.observable('none');
      this.memory_stats_available = ko.observable(!!this._getHeapSize());
      this.memory_start = ko.observable(this._getHeapSize());
      this.memory_current = ko.observable(this.memory_start());
      this.memory_delta = ko.observable(0);
      this.cycle_count = ko.observable(CYCLE_COUNT);
      this.cycle_interval = ko.observable(CYCLE_INTERVAL);
      this.memory_cycle_start = ko.observable(this._getHeapSize());
      this.memory_cycle_current = ko.observable(this.memory_cycle_start());
      this.memory_cycle_delta = ko.observable(0);
      setTimeout(this.updateIfOpened, STATS_UPDATE_INTERVAL);
    }

    StatisticsViewModel.prototype.open = function() {
      var _ref;
      if ((_ref = app.view_model) != null ? _ref.header : void 0) {
        app.view_model.header.mode_menu_is_opened(false);
      }
      this.is_opened(true);
      this.observable_stats(kb.statistics.registeredStatsString('None'));
      return this.model_events_stats(kb.statistics.modelEventsStatsString());
    };

    StatisticsViewModel.prototype.close = function() {
      this.is_opened(false);
      if (!app.view_model) {
        return app.setMode(app.mode);
      }
    };

    StatisticsViewModel.prototype.clear = function() {
      kb.statistics.clear();
      return this.model_events_stats(kb.statistics.modelEventsStatsString());
    };

    StatisticsViewModel.prototype.cyclePages = function() {
      var available_urls, cycle_count, loadNextPage, urls,
        _this = this;
      this.cycling_pages = true;
      this.memory_cycle_start(this._getHeapSize());
      if (!app.view_model) {
        app.setMode(app.mode);
        this.is_opened(true);
      }
      available_urls = ['', 'things'].concat(_.map(app.collections.things.models, function(test) {
        return "things/" + test.id;
      }));
      urls = [];
      cycle_count = this.cycle_count();
      while (cycle_count-- > 0) {
        urls = urls.concat(available_urls);
      }
      urls = _.shuffle(urls);
      loadNextPage = function() {
        var url;
        _this.updateStats();
        if (!urls.length) {
          _this.cycling_pages = false;
          return;
        }
        url = urls.shift();
        window.location.hash = url;
        return _.delay(loadNextPage, _this.cycle_interval());
      };
      return loadNextPage();
    };

    StatisticsViewModel.prototype.resetBaselineMemory = function() {
      return this.memory_start(this._getHeapSize());
    };

    StatisticsViewModel.prototype.updateIfOpened = function() {
      if (this.is_opened()) {
        this.updateStats();
      }
      return setTimeout(this.updateIfOpened, STATS_UPDATE_INTERVAL);
    };

    StatisticsViewModel.prototype.updateStats = function() {
      var heap_size;
      this.observable_stats(kb.statistics.registeredStatsString('None'));
      this.model_events_stats(kb.statistics.modelEventsStatsString());
      heap_size = this._getHeapSize();
      this.memory_current(heap_size);
      this.memory_delta(this.memory_current() - this.memory_start());
      if (this.cycling_pages) {
        this.memory_cycle_current(heap_size);
        return this.memory_cycle_delta(this.memory_cycle_current() - this.memory_cycle_start());
      }
    };

    StatisticsViewModel.prototype._getHeapSize = function() {
      var _ref, _ref1;
      return ((_ref = window.performance) != null ? (_ref1 = _ref.memory) != null ? _ref1.usedJSHeapSize : void 0 : void 0) / (1024 * 1024);
    };

    return StatisticsViewModel;

  })();

  window.ManagementView = "<ul class=\"nav pull-right\">\n  <li><a data-bind=\"click: toggleCredits\">Credits</a></li>\n  <li class=\"dropdown\" data-bind=\"classes: {open: mode_menu_is_opened()}\">\n    <a href=\"#\" class=\"dropdown-toggle\" data-bind=\"click: toggleModeMenu\">\n      <span data-bind=\"text: 'Mode (' + mode + ')'\"></span>\n      <b class=\"caret\"></b>\n    </a>\n    <ul class=\"dropdown-menu\">\n      <li><a data-bind=\"click: function(){app.setMode({tutorial: true});}\">Tutorial</a></li>\n      <li><a data-bind=\"click: function(){app.setMode({tutorial: true});}\">Knockback-Navigators</a></li>\n      <li class=\"divider\"></li>\n      <li><a data-bind=\"click: statistics.open\">Statistics</a></li>\n    </ul>\n  </li>\n</ul>";

  window.ThingViewExtendedView = "<div class='row'>\n\n  <!-- * MY INFORMATION * -->\n  <div class='span3'>\n    <legend data-bind=\"text: name\"></legend>\n    <p data-bind=\"text: caption\"></p>\n  </div>\n\n  <!-- * MY THINGS INFORMATION WITH EMBEDDED SLIDING PANE * -->\n  <div class='span8'>\n    <legend data-bind=\"text: 'My Things (' + my_things().length + ')'\"></legend>\n\n    <button class='btn btn-small' data-bind=\"click: kb.previousPane\"><i class='icon-step-backward'></i></button>\n    <button class='btn btn-small' data-bind=\"click: kb.nextPane\"><i class='icon-step-forward'></i></button>\n\n    <div style='position: relative; min-height: 180px'>\n      <div class='pane-navigator' data-bind=\"PaneNavigator: {transition: 'NavigationSlide'}, foreach: my_things\">\n        <div class='pane'>\n          <div class='cell thumbnail form-actions' data-bind=\"click: kb.loadUrlFn('things/'+id()), template: 'thing_view'\"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>";

}).call(this);
