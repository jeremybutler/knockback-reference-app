// Generated by CoffeeScript 1.3.3
(function() {
  var Backbone, kb, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  kb = !this.kb && (typeof require !== 'undefined') ? require('knockback') : this.kb;

  _ = kb._;

  Backbone = kb.Backbone;

  window.Application = (function() {

    function Application() {
      _.bindAll(this, 'deleteAllThings', 'saveAllThings', 'setMode');
      this.view_models = {};
      this.collections = {};
    }

    Application.prototype.initialize = function() {
      ko.setTemplateEngine(new TemplateEngine());
      Backbone.history || (Backbone.history = new Backbone.History());
      this.collections.things = new ThingCollection();
      _.delay((function() {
        return app.collections.things.fetch();
      }), 600);
      this.view_models.statistics = new StatisticsViewModel();
      this.statistics_el = kb.renderTemplate('statistics', this.view_models.statistics);
      $('body').append(this.statistics_el);
      return this.setMode({
        tutorial: true
      });
    };

    Application.prototype.destroy = function() {
      ko.releaseNode(this.statistics_el);
      return this.statistics_el = this.view_models = null;
    };

    Application.prototype.deleteAllThings = function() {
      var model, _i, _len, _ref;
      _ref = _.clone(this.collections.things.models);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        model.destroy();
      }
      return this;
    };

    Application.prototype.saveAllThings = function() {
      var model, _i, _len, _ref;
      _ref = this.collections.things.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        if (model.hasChanged()) {
          model.save();
        }
      }
      return this;
    };

    Application.prototype.setMode = function(mode) {
      if (mode == null) {
        mode = {};
      }
      if (this.view_model && this.view_model.header) {
        this.view_model.header.mode_menu_is_opened(false);
      }
      if (mode.no_app) {
        this.view_models.statistics.open();
        if (this.view_model) {
          this.view_model = null;
          ko.removeNode(this.el);
          this.el = null;
        }
        Backbone.Relational.store.clear();
        return;
      }
      this.mode = mode;
      if (this.view_model) {
        this.view_model = null;
        ko.removeNode(this.el);
        this.el = null;
      }
      this.view_model = mode.tutorial ? new ApplicationViewModel() : new ApplicationViewModelExtended(mode);
      this.el = kb.renderTemplate('app', this.view_model, {
        afterRender: this.view_model.afterRender
      });
      $('body').append(this.el);
      this.view_models.statistics.close();
      if (Backbone.History.started) {
        Backbone.history.loadUrl(window.location.hash);
      } else {
        Backbone.history.start({
          hashChange: true
        });
      }
      return this;
    };

    return Application;

  })();

  $(function() {
    window.app = new Application();
    return app.initialize();
  });

  ko.bindingHandlers['classes'] = {
    update: function(element, value_accessor) {
      var key, state, _ref;
      _ref = ko.utils.unwrapObservable(value_accessor());
      for (key in _ref) {
        state = _ref[key];
        if (state) {
          $(element).addClass(key);
        } else {
          $(element).removeClass(key);
        }
      }
      return this;
    }
  };

  ko.bindingHandlers['spinner'] = {
    init: function(element, value_accessor) {
      element.spinner = new Spinner(ko.utils.unwrapObservable(value_accessor())).spin(element);
      return ko.utils.domNodeDisposal.addDisposeCallback(element, function() {
        if (element.spinner) {
          element.spinner.stop();
          return element.spinner = null;
        }
      });
    }
  };

  ko.bindingHandlers['fadeIn'] = {
    update: function(element, value_accessor) {
      if (!!ko.utils.unwrapObservable(value_accessor())) {
        return $(element).hide().fadeIn(500);
      }
    }
  };

  window.utils || (window.utils = {});

  window.utils.decrementClampedObservable = function(observable) {
    var value;
    value = observable();
    if (value > 0) {
      observable(--value);
    }
    return value;
  };

  window.Thing = Backbone.RelationalModel.extend({
    url: function() {
      return "things/" + (this.get('id'));
    },
    relations: [
      {
        type: 'HasMany',
        key: 'my_things',
        includeInJSON: 'id',
        relatedModel: 'Thing',
        reverseRelation: {
          key: 'my_owner',
          includeInJSON: 'id'
        }
      }
    ]
  });

  window.ThingCollection = Backbone.Collection.extend({
    localStorage: new Store('things-knockback'),
    model: Thing
  });

  window.RouterBackboneJS = Backbone.Router.extend({
    constructor: function() {
      var _this = this;
      Backbone.Router.prototype.constructor.apply(this, arguments);
      this.active_el = null;
      this.route('', null, function() {
        return _this.loadPage(kb.renderTemplate('home', {}));
      });
      this.route('things', null, function() {
        return _this.loadPage(kb.renderTemplate('things_page', new ThingsPageViewModel()));
      });
      return this.route('things/:id', null, function(id) {
        var model;
        model = app.collections.things.get(id) || new Backbone.ModelRef(app.collections.things, id);
        return _this.loadPage(kb.renderTemplate('thing_page', new ThingCellViewModel(model)));
      });
    },
    loadPage: function(el) {
      if (this.active_el) {
        ko.removeNode(this.active_el);
      }
      $('.pane-navigator.page').append(this.active_el = el);
      return $(el).addClass('active');
    },
    destroy: function() {
      var handlers;
      this.active_el = null;
      handlers = Backbone.history.handlers;
      return handlers.splice(0, handlers.length);
    }
  });

  window.ApplicationViewModel = (function() {

    function ApplicationViewModel() {
      this.afterRender = __bind(this.afterRender, this);
      _.bindAll(this, 'afterRender');
      if (!this.mode) {
        this.mode = 'Tutorial';
      }
      this.header = new HeaderViewModel(this.mode);
    }

    ApplicationViewModel.prototype.afterRender = function(nodes) {
      if (!this.router) {
        return this.router = new RouterBackboneJS();
      }
    };

    return ApplicationViewModel;

  })();

  window.HeaderViewModel = (function() {

    function HeaderViewModel(mode) {
      var _this = this;
      this.mode = mode;
      this.active_url = ko.observable(window.location.hash);
      this.setActiveUrl = function() {
        return _this.active_url(window.location.hash);
      };
      Backbone.history.bind('route', this.setActiveUrl);
      this.nav_items = ko.observableArray([
        {
          name: 'Welcome',
          url: '',
          goTo: function(vm) {
            return kb.loadUrl(vm.url);
          }
        }, {
          name: 'Manage Things',
          url: 'things',
          goTo: function(vm) {
            return kb.loadUrl(vm.url);
          }
        }
      ]);
      this.credits_is_opened = ko.observable(false);
      this.toggleCredits = function() {
        return _this.credits_is_opened(!_this.credits_is_opened());
      };
      this.mode_menu_is_opened = ko.observable(false);
      this.toggleModeMenu = function() {
        return _this.mode_menu_is_opened(!_this.mode_menu_is_opened());
      };
    }

    HeaderViewModel.prototype.destroy = function() {
      return Backbone.history.unbind('route', this.setActiveUrl);
    };

    return HeaderViewModel;

  })();

  window.NewThingViewModel = kb.ViewModel.extend({
    constructor: function() {
      var model,
        _this = this;
      _.bindAll(this, 'onAdd', 'onClear');
      kb.ViewModel.prototype.constructor.call(this, model = new Thing(), {
        requires: ['id', 'name', 'caption'],
        excludes: ['my_things']
      });
      this.my_things_select = ko.observableArray();
      this.available_things = kb.collectionObservable(app.collections.things, {
        sort_attribute: 'name',
        view_model: ThingLinkViewModel
      });
      this.validations_filter_count = ko.observable(2);
      this.name_errors = ko.computed(function() {
        var errors, name;
        if (!(name = _this.name())) {
          errors = 'Things like names';
        } else if (_.find(app.collections.things.models, function(test) {
          return test.get('name') === name;
        })) {
          errors = "" + name + " already taken";
        }
        if (utils.decrementClampedObservable(_this.validations_filter_count)) {
          return '';
        } else {
          return errors;
        }
      });
      return this;
    },
    onAdd: function() {
      var model;
      $('*:focus').blur();
      this.validations_filter_count(0);
      if (this.name_errors()) {
        return;
      }
      model = kb.utils.wrappedObject(this);
      model.get('my_things').reset(_.map(this.my_things_select(), function(vm) {
        return kb.utils.wrappedModel(vm);
      }));
      app.collections.things.add(model);
      model.save(null, {
        success: function() {
          return _.defer(app.saveAllThings);
        }
      });
      return this.onClear();
    },
    onClear: function() {
      this.validations_filter_count(3);
      this.my_things_select([]);
      return this.model(new Thing());
    }
  });

  window.ThingCellViewModel = kb.ViewModel.extend({
    constructor: function(model, options) {
      var _this = this;
      kb.ViewModel.prototype.constructor.call(this, model, {
        requires: ['id', 'name', 'caption', 'my_things', 'my_owner'],
        factories: {
          'my_things': ThingCellCollectionObservable,
          'my_owner': ThingLinkViewModel
        },
        options: options
      });
      this.my_things_select = ko.observableArray(this.my_things());
      this.my_things.subscribe(function(value) {
        return _this.my_things_select(value);
      });
      this.available_things = new ThingCellCollectionObservable(app.collections.things, {
        filters: this.id,
        sort_attribute: 'name',
        options: this.my_things.value().shareOptions()
      });
      this.sorted_thing_links = kb.collectionObservable(app.collections.things, {
        view_model: ThingLinkViewModel,
        sort_attribute: 'name'
      });
      this.edit_mode = ko.observable(false);
      this.name_errors = ko.computed(function() {
        var name;
        if (!(name = _this.name())) {
          return 'Things like names';
        } else if (_.find(app.collections.things.models, function(test) {
          return (test.get('name') === name) && (test.get('id') !== _this.id());
        })) {
          return "" + name + " already taken";
        }
      });
      this.my_model = model;
      this.is_loaded = ko.observable(model && model.isLoaded());
      this._onModelLoaded = function(m) {
        _this.start_attributes = m.toJSON();
        return _this.is_loaded(true);
      };
      !model || model.bindLoadingStates(this._onModelLoaded);
      return this;
    },
    onEdit: function() {
      this.my_things_select(this.my_things());
      return this.edit_mode(true);
    },
    onDelete: function() {
      var model;
      if ((model = kb.utils.wrappedObject(this))) {
        model.destroy({
          success: function() {
            return _.defer(app.saveAllThings);
          }
        });
      }
      return kb.loadUrl('things');
    },
    onSubmit: function() {
      var model;
      if (this.name_errors()) {
        return;
      }
      if ((model = kb.utils.wrappedObject(this))) {
        model.get('my_things').reset(_.map(this.my_things_select(), function(vm) {
          return kb.utils.wrappedModel(vm);
        }));
        app.saveAllThings();
      }
      return this.edit_mode(false);
    },
    onCancel: function() {
      var model;
      if ((model = kb.utils.wrappedObject(this))) {
        model.set(this.start_attributes);
      }
      return this.edit_mode(false);
    }
  });

  window.ThingCellCollectionObservable = kb.CollectionObservable.extend({
    constructor: function(collection, options) {
      return kb.CollectionObservable.prototype.constructor.call(this, collection, {
        view_model: ThingCellViewModel,
        options: options
      });
    }
  });

  window.ThingLinkViewModel = kb.ViewModel.extend({
    constructor: function(model, options) {
      kb.ViewModel.prototype.constructor.call(this, model, {
        keys: ['name', 'id'],
        options: options
      });
      return this;
    }
  });

  window.ThingsPageViewModel = function() {
    this.sorted_thing_links = kb.collectionObservable(app.collections.things, {
      view_model: ThingLinkViewModel,
      sort_attribute: 'name'
    });
    this.things = kb.collectionObservable(app.collections.things, {
      view_model: ThingCellViewModel
    });
    this.new_thing = new NewThingViewModel();
    return this;
  };

}).call(this);
